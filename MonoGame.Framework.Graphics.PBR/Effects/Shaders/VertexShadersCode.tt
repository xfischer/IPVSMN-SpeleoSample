<#@ template debug="false" hostspecific="false" language="c#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".fx" #>
//-----------------------------------------------------
//         Autogenerated code - DO NOT EDIT -
//         Edit VertexShadersCode.tt and save.
//-----------------------------------------------------


float4x4 View;
float4x4 Projection;




<#

var vsMatPermutations = new [] {0,1,2,3};
var vsSrfPermutations = new [] {0,1,2};

foreach(int vsMat in vsMatPermutations)
{
    // vertex material permutations
    // 0 - color
    // 1 - uv0
    // 2 - color + uv0
    // 3 - color + uv0 + uv1

    var HASCOLOR = vsMat != 1;
    var HASTXUV0 = vsMat != 0;
    var HASTXUV1 = vsMat == 3;

    foreach(int vsSrf in vsSrfPermutations)
    {
        // vertex surface permutations
        // 0 - nothing (used by Unlit shaders)
        // 1 - normal
        // 2 - normal + tangent        

        var HASNORMAL = vsSrf != 0;
        var HASTANGENT = vsSrf >= 2;

        // define vertex shader name

        var vsName = string.Empty;

        if (HASNORMAL) vsName +="_N";
        if (HASTANGENT) vsName +="T";        
    
        if (HASCOLOR) vsName +="_C1";
        if (HASTXUV0 && !HASTXUV1) vsName +="_UV1";
        if (HASTXUV0 && HASTXUV1) vsName +="_UV2";

        var RIGIDVERTEX = "VsInRigid" + vsName;
        var SKINNEDVERTEX = "VsInSkinned" + vsName;

#>

VsOutTexNorm <#= RIGIDVERTEX#>_VShader(<#= RIGIDVERTEX#> input)
{
    VsOutTexNorm output;

    float4 pos = input.GetWorldPosition();
    output.PositionWS = pos.xyz;

    float4x4 xvp = mul(View, Projection);
    output.PositionPS = mul(pos, xvp);

    <# if (HASNORMAL || HASTANGENT) { #> 
    float3x3 TBN = input.GetTangentBasis();
    // output.TangentBasis = TBN;
    output.TangentBasisX = TBN[0];
    output.TangentBasisY = TBN[1];
    output.TangentBasisZ = TBN[2];    
    <# } else { #>
    // output.TangentBasis = ?;
    output.TangentBasisX = float3(1,0,0);
    output.TangentBasisY = float3(0,1,0);
    output.TangentBasisZ = float3(0,0,1);
    <# } #>

    <# if (HASCOLOR) { #>output.Color = input.Color;<# } else { #>output.Color = float4(1,1,1,1);<# } #>    
    <# if (HASTXUV0) { #>output.TextureCoordinate0 = input.TextureCoordinate0;<# } else { #>output.TextureCoordinate0 = float2(0.5,0.5);<# } #>  
    <# if (HASTXUV1) { #>output.TextureCoordinate1 = input.TextureCoordinate1;<# } else { #>output.TextureCoordinate1 = output.TextureCoordinate0;<# } #>  

    return output;
}

VsOutTexNorm <#= SKINNEDVERTEX#>_VShader(<#= SKINNEDVERTEX#> input)
{
    <#= RIGIDVERTEX#> output = input.GetTransformedByBones();

    return <#= RIGIDVERTEX#>_VShader(output);
}

<# } } #>




