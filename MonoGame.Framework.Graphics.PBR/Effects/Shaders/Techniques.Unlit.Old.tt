<#@ template debug="false" hostspecific="false" language="hlsl" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".fx" #>
//-----------------------------------------------------
//         Autogenerated code - DO NOT EDIT -
//           Edit Permutations.tt and save.
//-----------------------------------------------------

#include "Unlit.fx"
#include "VertexShaders.fx"

<# //---------------------------------------------------

var psShaders = new List<string>(); // store pixel shader definitions here

for(int psIdx=0; psIdx < 8; ++psIdx)
{

var PSSHADER = "Ps";

var hasPrimary =(psIdx & 1) != 0;
var hasEmissive =(psIdx & 2) != 0;
var hasOpacity =(psIdx & 4) != 0;

if (hasPrimary) PSSHADER += "Primary";
if (hasEmissive) PSSHADER += "Emissive";
if (hasOpacity) PSSHADER += "Opacity";

psShaders.Add(PSSHADER);

#>
float4 <#=PSSHADER#>(VsOutTexNorm input) : COLOR0
{
	return PsShader(input	
	, <#= hasPrimary.ToString().ToLower() #>	
	, <#= hasEmissive.ToString().ToLower() #>
	, <#= hasOpacity.ToString().ToLower() #>
	);
}

<# }

for(int psIdx=0; psIdx < psShaders.Count; ++psIdx) { var PSSHADER = psShaders[psIdx]; var hasTangents =(psIdx & 1) != 0;
for(int vsIdx =0; vsIdx < 4; ++vsIdx) {
var VSSHADER = vsIdx == 0 || vsIdx == 2 ? "VsRigid" : "VsSkinned";  // 1 & 3 are reserved for morphing

#>
TECHNIQUE(<#=VSSHADER#>_<#=PSSHADER#>, <#=VSSHADER#>, <#=PSSHADER#> );

<# } } #>