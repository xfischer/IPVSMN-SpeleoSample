//-----------------------------------------------------
//         Autogenerated code - DO NOT EDIT -
//         Edit VertexShadersCode.tt and save.
//-----------------------------------------------------

#include "PBR.fx"
#include "VertexShadersStructs.fx"
#include "VertexShadersCode.fx"


float4 Ps_PShader(VsOutTexNorm input) : COLOR0
{
	return PsShader(input, false, false, false, false, false);
}


float4 Ps_N_PShader(VsOutTexNorm input) : COLOR0
{
	return PsShader(input, true, false, false, false, false);
}


float4 Ps_A_PShader(VsOutTexNorm input) : COLOR0
{
	return PsShader(input, false, true, false, false, false);
}


float4 Ps_N_A_PShader(VsOutTexNorm input) : COLOR0
{
	return PsShader(input, true, true, false, false, false);
}


float4 Ps_B_PShader(VsOutTexNorm input) : COLOR0
{
	return PsShader(input, false, false, true, false, false);
}


float4 Ps_N_B_PShader(VsOutTexNorm input) : COLOR0
{
	return PsShader(input, true, false, true, false, false);
}


float4 Ps_A_B_PShader(VsOutTexNorm input) : COLOR0
{
	return PsShader(input, false, true, true, false, false);
}


float4 Ps_N_A_B_PShader(VsOutTexNorm input) : COLOR0
{
	return PsShader(input, true, true, true, false, false);
}


float4 Ps_E_PShader(VsOutTexNorm input) : COLOR0
{
	return PsShader(input, false, false, false, true, false);
}


float4 Ps_N_E_PShader(VsOutTexNorm input) : COLOR0
{
	return PsShader(input, true, false, false, true, false);
}


float4 Ps_A_E_PShader(VsOutTexNorm input) : COLOR0
{
	return PsShader(input, false, true, false, true, false);
}


float4 Ps_N_A_E_PShader(VsOutTexNorm input) : COLOR0
{
	return PsShader(input, true, true, false, true, false);
}


float4 Ps_B_E_PShader(VsOutTexNorm input) : COLOR0
{
	return PsShader(input, false, false, true, true, false);
}


float4 Ps_N_B_E_PShader(VsOutTexNorm input) : COLOR0
{
	return PsShader(input, true, false, true, true, false);
}


float4 Ps_A_B_E_PShader(VsOutTexNorm input) : COLOR0
{
	return PsShader(input, false, true, true, true, false);
}


float4 Ps_N_A_B_E_PShader(VsOutTexNorm input) : COLOR0
{
	return PsShader(input, true, true, true, true, false);
}


float4 Ps_O_PShader(VsOutTexNorm input) : COLOR0
{
	return PsShader(input, false, false, false, false, true);
}


float4 Ps_N_O_PShader(VsOutTexNorm input) : COLOR0
{
	return PsShader(input, true, false, false, false, true);
}


float4 Ps_A_O_PShader(VsOutTexNorm input) : COLOR0
{
	return PsShader(input, false, true, false, false, true);
}


float4 Ps_N_A_O_PShader(VsOutTexNorm input) : COLOR0
{
	return PsShader(input, true, true, false, false, true);
}


float4 Ps_B_O_PShader(VsOutTexNorm input) : COLOR0
{
	return PsShader(input, false, false, true, false, true);
}


float4 Ps_N_B_O_PShader(VsOutTexNorm input) : COLOR0
{
	return PsShader(input, true, false, true, false, true);
}


float4 Ps_A_B_O_PShader(VsOutTexNorm input) : COLOR0
{
	return PsShader(input, false, true, true, false, true);
}


float4 Ps_N_A_B_O_PShader(VsOutTexNorm input) : COLOR0
{
	return PsShader(input, true, true, true, false, true);
}


float4 Ps_E_O_PShader(VsOutTexNorm input) : COLOR0
{
	return PsShader(input, false, false, false, true, true);
}


float4 Ps_N_E_O_PShader(VsOutTexNorm input) : COLOR0
{
	return PsShader(input, true, false, false, true, true);
}


float4 Ps_A_E_O_PShader(VsOutTexNorm input) : COLOR0
{
	return PsShader(input, false, true, false, true, true);
}


float4 Ps_N_A_E_O_PShader(VsOutTexNorm input) : COLOR0
{
	return PsShader(input, true, true, false, true, true);
}


float4 Ps_B_E_O_PShader(VsOutTexNorm input) : COLOR0
{
	return PsShader(input, false, false, true, true, true);
}


float4 Ps_N_B_E_O_PShader(VsOutTexNorm input) : COLOR0
{
	return PsShader(input, true, false, true, true, true);
}


float4 Ps_A_B_E_O_PShader(VsOutTexNorm input) : COLOR0
{
	return PsShader(input, false, true, true, true, true);
}


float4 Ps_N_A_B_E_O_PShader(VsOutTexNorm input) : COLOR0
{
	return PsShader(input, true, true, true, true, true);
}


// Technique Index =
//   Bit0 : Rigid / Skinned
//   Bit1 : VertexTangents+NormalMap
//   Bit2 : \
//           0=Color, 1=UV0, 2=Color+UV0, 3=Color+UV0+UV1
//   Bit3 : /

//   Bit4 : Primary Texture
//   Bit5 : Secondary Texture
//   Bit6 : Emissive Texture
//   Bit7 : Opacity Texture
//   Bit8 : IBL Light

// Notice that enabling vertex shader tangent normals also enables Normal Texture


// 0
TECHNIQUE(VsInRigid_N_C1_Ps, VsInRigid_N_C1_VShader, Ps_PShader );

// 1
TECHNIQUE(VsInSkinned_N_C1_Ps, VsInSkinned_N_C1_VShader, Ps_PShader );


// 2
TECHNIQUE(VsInRigid_NT_C1_Ps_N, VsInRigid_NT_C1_VShader, Ps_N_PShader );

// 3
TECHNIQUE(VsInSkinned_NT_C1_Ps_N, VsInSkinned_NT_C1_VShader, Ps_N_PShader );


// 4
TECHNIQUE(VsInRigid_N_UV1_Ps, VsInRigid_N_UV1_VShader, Ps_PShader );

// 5
TECHNIQUE(VsInSkinned_N_UV1_Ps, VsInSkinned_N_UV1_VShader, Ps_PShader );


// 6
TECHNIQUE(VsInRigid_NT_UV1_Ps_N, VsInRigid_NT_UV1_VShader, Ps_N_PShader );

// 7
TECHNIQUE(VsInSkinned_NT_UV1_Ps_N, VsInSkinned_NT_UV1_VShader, Ps_N_PShader );


// 8
TECHNIQUE(VsInRigid_N_C1_UV1_Ps, VsInRigid_N_C1_UV1_VShader, Ps_PShader );

// 9
TECHNIQUE(VsInSkinned_N_C1_UV1_Ps, VsInSkinned_N_C1_UV1_VShader, Ps_PShader );


// 10
TECHNIQUE(VsInRigid_NT_C1_UV1_Ps_N, VsInRigid_NT_C1_UV1_VShader, Ps_N_PShader );

// 11
TECHNIQUE(VsInSkinned_NT_C1_UV1_Ps_N, VsInSkinned_NT_C1_UV1_VShader, Ps_N_PShader );


// 12
TECHNIQUE(VsInRigid_N_C1_UV2_Ps, VsInRigid_N_C1_UV2_VShader, Ps_PShader );

// 13
TECHNIQUE(VsInSkinned_N_C1_UV2_Ps, VsInSkinned_N_C1_UV2_VShader, Ps_PShader );


// 14
TECHNIQUE(VsInRigid_NT_C1_UV2_Ps_N, VsInRigid_NT_C1_UV2_VShader, Ps_N_PShader );

// 15
TECHNIQUE(VsInSkinned_NT_C1_UV2_Ps_N, VsInSkinned_NT_C1_UV2_VShader, Ps_N_PShader );


// 16
TECHNIQUE(VsInRigid_N_C1_Ps_A, VsInRigid_N_C1_VShader, Ps_A_PShader );

// 17
TECHNIQUE(VsInSkinned_N_C1_Ps_A, VsInSkinned_N_C1_VShader, Ps_A_PShader );


// 18
TECHNIQUE(VsInRigid_NT_C1_Ps_N_A, VsInRigid_NT_C1_VShader, Ps_N_A_PShader );

// 19
TECHNIQUE(VsInSkinned_NT_C1_Ps_N_A, VsInSkinned_NT_C1_VShader, Ps_N_A_PShader );


// 20
TECHNIQUE(VsInRigid_N_UV1_Ps_A, VsInRigid_N_UV1_VShader, Ps_A_PShader );

// 21
TECHNIQUE(VsInSkinned_N_UV1_Ps_A, VsInSkinned_N_UV1_VShader, Ps_A_PShader );


// 22
TECHNIQUE(VsInRigid_NT_UV1_Ps_N_A, VsInRigid_NT_UV1_VShader, Ps_N_A_PShader );

// 23
TECHNIQUE(VsInSkinned_NT_UV1_Ps_N_A, VsInSkinned_NT_UV1_VShader, Ps_N_A_PShader );


// 24
TECHNIQUE(VsInRigid_N_C1_UV1_Ps_A, VsInRigid_N_C1_UV1_VShader, Ps_A_PShader );

// 25
TECHNIQUE(VsInSkinned_N_C1_UV1_Ps_A, VsInSkinned_N_C1_UV1_VShader, Ps_A_PShader );


// 26
TECHNIQUE(VsInRigid_NT_C1_UV1_Ps_N_A, VsInRigid_NT_C1_UV1_VShader, Ps_N_A_PShader );

// 27
TECHNIQUE(VsInSkinned_NT_C1_UV1_Ps_N_A, VsInSkinned_NT_C1_UV1_VShader, Ps_N_A_PShader );


// 28
TECHNIQUE(VsInRigid_N_C1_UV2_Ps_A, VsInRigid_N_C1_UV2_VShader, Ps_A_PShader );

// 29
TECHNIQUE(VsInSkinned_N_C1_UV2_Ps_A, VsInSkinned_N_C1_UV2_VShader, Ps_A_PShader );


// 30
TECHNIQUE(VsInRigid_NT_C1_UV2_Ps_N_A, VsInRigid_NT_C1_UV2_VShader, Ps_N_A_PShader );

// 31
TECHNIQUE(VsInSkinned_NT_C1_UV2_Ps_N_A, VsInSkinned_NT_C1_UV2_VShader, Ps_N_A_PShader );


// 32
TECHNIQUE(VsInRigid_N_C1_Ps_B, VsInRigid_N_C1_VShader, Ps_B_PShader );

// 33
TECHNIQUE(VsInSkinned_N_C1_Ps_B, VsInSkinned_N_C1_VShader, Ps_B_PShader );


// 34
TECHNIQUE(VsInRigid_NT_C1_Ps_N_B, VsInRigid_NT_C1_VShader, Ps_N_B_PShader );

// 35
TECHNIQUE(VsInSkinned_NT_C1_Ps_N_B, VsInSkinned_NT_C1_VShader, Ps_N_B_PShader );


// 36
TECHNIQUE(VsInRigid_N_UV1_Ps_B, VsInRigid_N_UV1_VShader, Ps_B_PShader );

// 37
TECHNIQUE(VsInSkinned_N_UV1_Ps_B, VsInSkinned_N_UV1_VShader, Ps_B_PShader );


// 38
TECHNIQUE(VsInRigid_NT_UV1_Ps_N_B, VsInRigid_NT_UV1_VShader, Ps_N_B_PShader );

// 39
TECHNIQUE(VsInSkinned_NT_UV1_Ps_N_B, VsInSkinned_NT_UV1_VShader, Ps_N_B_PShader );


// 40
TECHNIQUE(VsInRigid_N_C1_UV1_Ps_B, VsInRigid_N_C1_UV1_VShader, Ps_B_PShader );

// 41
TECHNIQUE(VsInSkinned_N_C1_UV1_Ps_B, VsInSkinned_N_C1_UV1_VShader, Ps_B_PShader );


// 42
TECHNIQUE(VsInRigid_NT_C1_UV1_Ps_N_B, VsInRigid_NT_C1_UV1_VShader, Ps_N_B_PShader );

// 43
TECHNIQUE(VsInSkinned_NT_C1_UV1_Ps_N_B, VsInSkinned_NT_C1_UV1_VShader, Ps_N_B_PShader );


// 44
TECHNIQUE(VsInRigid_N_C1_UV2_Ps_B, VsInRigid_N_C1_UV2_VShader, Ps_B_PShader );

// 45
TECHNIQUE(VsInSkinned_N_C1_UV2_Ps_B, VsInSkinned_N_C1_UV2_VShader, Ps_B_PShader );


// 46
TECHNIQUE(VsInRigid_NT_C1_UV2_Ps_N_B, VsInRigid_NT_C1_UV2_VShader, Ps_N_B_PShader );

// 47
TECHNIQUE(VsInSkinned_NT_C1_UV2_Ps_N_B, VsInSkinned_NT_C1_UV2_VShader, Ps_N_B_PShader );


// 48
TECHNIQUE(VsInRigid_N_C1_Ps_A_B, VsInRigid_N_C1_VShader, Ps_A_B_PShader );

// 49
TECHNIQUE(VsInSkinned_N_C1_Ps_A_B, VsInSkinned_N_C1_VShader, Ps_A_B_PShader );


// 50
TECHNIQUE(VsInRigid_NT_C1_Ps_N_A_B, VsInRigid_NT_C1_VShader, Ps_N_A_B_PShader );

// 51
TECHNIQUE(VsInSkinned_NT_C1_Ps_N_A_B, VsInSkinned_NT_C1_VShader, Ps_N_A_B_PShader );


// 52
TECHNIQUE(VsInRigid_N_UV1_Ps_A_B, VsInRigid_N_UV1_VShader, Ps_A_B_PShader );

// 53
TECHNIQUE(VsInSkinned_N_UV1_Ps_A_B, VsInSkinned_N_UV1_VShader, Ps_A_B_PShader );


// 54
TECHNIQUE(VsInRigid_NT_UV1_Ps_N_A_B, VsInRigid_NT_UV1_VShader, Ps_N_A_B_PShader );

// 55
TECHNIQUE(VsInSkinned_NT_UV1_Ps_N_A_B, VsInSkinned_NT_UV1_VShader, Ps_N_A_B_PShader );


// 56
TECHNIQUE(VsInRigid_N_C1_UV1_Ps_A_B, VsInRigid_N_C1_UV1_VShader, Ps_A_B_PShader );

// 57
TECHNIQUE(VsInSkinned_N_C1_UV1_Ps_A_B, VsInSkinned_N_C1_UV1_VShader, Ps_A_B_PShader );


// 58
TECHNIQUE(VsInRigid_NT_C1_UV1_Ps_N_A_B, VsInRigid_NT_C1_UV1_VShader, Ps_N_A_B_PShader );

// 59
TECHNIQUE(VsInSkinned_NT_C1_UV1_Ps_N_A_B, VsInSkinned_NT_C1_UV1_VShader, Ps_N_A_B_PShader );


// 60
TECHNIQUE(VsInRigid_N_C1_UV2_Ps_A_B, VsInRigid_N_C1_UV2_VShader, Ps_A_B_PShader );

// 61
TECHNIQUE(VsInSkinned_N_C1_UV2_Ps_A_B, VsInSkinned_N_C1_UV2_VShader, Ps_A_B_PShader );


// 62
TECHNIQUE(VsInRigid_NT_C1_UV2_Ps_N_A_B, VsInRigid_NT_C1_UV2_VShader, Ps_N_A_B_PShader );

// 63
TECHNIQUE(VsInSkinned_NT_C1_UV2_Ps_N_A_B, VsInSkinned_NT_C1_UV2_VShader, Ps_N_A_B_PShader );


// 64
TECHNIQUE(VsInRigid_N_C1_Ps_E, VsInRigid_N_C1_VShader, Ps_E_PShader );

// 65
TECHNIQUE(VsInSkinned_N_C1_Ps_E, VsInSkinned_N_C1_VShader, Ps_E_PShader );


// 66
TECHNIQUE(VsInRigid_NT_C1_Ps_N_E, VsInRigid_NT_C1_VShader, Ps_N_E_PShader );

// 67
TECHNIQUE(VsInSkinned_NT_C1_Ps_N_E, VsInSkinned_NT_C1_VShader, Ps_N_E_PShader );


// 68
TECHNIQUE(VsInRigid_N_UV1_Ps_E, VsInRigid_N_UV1_VShader, Ps_E_PShader );

// 69
TECHNIQUE(VsInSkinned_N_UV1_Ps_E, VsInSkinned_N_UV1_VShader, Ps_E_PShader );


// 70
TECHNIQUE(VsInRigid_NT_UV1_Ps_N_E, VsInRigid_NT_UV1_VShader, Ps_N_E_PShader );

// 71
TECHNIQUE(VsInSkinned_NT_UV1_Ps_N_E, VsInSkinned_NT_UV1_VShader, Ps_N_E_PShader );


// 72
TECHNIQUE(VsInRigid_N_C1_UV1_Ps_E, VsInRigid_N_C1_UV1_VShader, Ps_E_PShader );

// 73
TECHNIQUE(VsInSkinned_N_C1_UV1_Ps_E, VsInSkinned_N_C1_UV1_VShader, Ps_E_PShader );


// 74
TECHNIQUE(VsInRigid_NT_C1_UV1_Ps_N_E, VsInRigid_NT_C1_UV1_VShader, Ps_N_E_PShader );

// 75
TECHNIQUE(VsInSkinned_NT_C1_UV1_Ps_N_E, VsInSkinned_NT_C1_UV1_VShader, Ps_N_E_PShader );


// 76
TECHNIQUE(VsInRigid_N_C1_UV2_Ps_E, VsInRigid_N_C1_UV2_VShader, Ps_E_PShader );

// 77
TECHNIQUE(VsInSkinned_N_C1_UV2_Ps_E, VsInSkinned_N_C1_UV2_VShader, Ps_E_PShader );


// 78
TECHNIQUE(VsInRigid_NT_C1_UV2_Ps_N_E, VsInRigid_NT_C1_UV2_VShader, Ps_N_E_PShader );

// 79
TECHNIQUE(VsInSkinned_NT_C1_UV2_Ps_N_E, VsInSkinned_NT_C1_UV2_VShader, Ps_N_E_PShader );


// 80
TECHNIQUE(VsInRigid_N_C1_Ps_A_E, VsInRigid_N_C1_VShader, Ps_A_E_PShader );

// 81
TECHNIQUE(VsInSkinned_N_C1_Ps_A_E, VsInSkinned_N_C1_VShader, Ps_A_E_PShader );


// 82
TECHNIQUE(VsInRigid_NT_C1_Ps_N_A_E, VsInRigid_NT_C1_VShader, Ps_N_A_E_PShader );

// 83
TECHNIQUE(VsInSkinned_NT_C1_Ps_N_A_E, VsInSkinned_NT_C1_VShader, Ps_N_A_E_PShader );


// 84
TECHNIQUE(VsInRigid_N_UV1_Ps_A_E, VsInRigid_N_UV1_VShader, Ps_A_E_PShader );

// 85
TECHNIQUE(VsInSkinned_N_UV1_Ps_A_E, VsInSkinned_N_UV1_VShader, Ps_A_E_PShader );


// 86
TECHNIQUE(VsInRigid_NT_UV1_Ps_N_A_E, VsInRigid_NT_UV1_VShader, Ps_N_A_E_PShader );

// 87
TECHNIQUE(VsInSkinned_NT_UV1_Ps_N_A_E, VsInSkinned_NT_UV1_VShader, Ps_N_A_E_PShader );


// 88
TECHNIQUE(VsInRigid_N_C1_UV1_Ps_A_E, VsInRigid_N_C1_UV1_VShader, Ps_A_E_PShader );

// 89
TECHNIQUE(VsInSkinned_N_C1_UV1_Ps_A_E, VsInSkinned_N_C1_UV1_VShader, Ps_A_E_PShader );


// 90
TECHNIQUE(VsInRigid_NT_C1_UV1_Ps_N_A_E, VsInRigid_NT_C1_UV1_VShader, Ps_N_A_E_PShader );

// 91
TECHNIQUE(VsInSkinned_NT_C1_UV1_Ps_N_A_E, VsInSkinned_NT_C1_UV1_VShader, Ps_N_A_E_PShader );


// 92
TECHNIQUE(VsInRigid_N_C1_UV2_Ps_A_E, VsInRigid_N_C1_UV2_VShader, Ps_A_E_PShader );

// 93
TECHNIQUE(VsInSkinned_N_C1_UV2_Ps_A_E, VsInSkinned_N_C1_UV2_VShader, Ps_A_E_PShader );


// 94
TECHNIQUE(VsInRigid_NT_C1_UV2_Ps_N_A_E, VsInRigid_NT_C1_UV2_VShader, Ps_N_A_E_PShader );

// 95
TECHNIQUE(VsInSkinned_NT_C1_UV2_Ps_N_A_E, VsInSkinned_NT_C1_UV2_VShader, Ps_N_A_E_PShader );


// 96
TECHNIQUE(VsInRigid_N_C1_Ps_B_E, VsInRigid_N_C1_VShader, Ps_B_E_PShader );

// 97
TECHNIQUE(VsInSkinned_N_C1_Ps_B_E, VsInSkinned_N_C1_VShader, Ps_B_E_PShader );


// 98
TECHNIQUE(VsInRigid_NT_C1_Ps_N_B_E, VsInRigid_NT_C1_VShader, Ps_N_B_E_PShader );

// 99
TECHNIQUE(VsInSkinned_NT_C1_Ps_N_B_E, VsInSkinned_NT_C1_VShader, Ps_N_B_E_PShader );


// 100
TECHNIQUE(VsInRigid_N_UV1_Ps_B_E, VsInRigid_N_UV1_VShader, Ps_B_E_PShader );

// 101
TECHNIQUE(VsInSkinned_N_UV1_Ps_B_E, VsInSkinned_N_UV1_VShader, Ps_B_E_PShader );


// 102
TECHNIQUE(VsInRigid_NT_UV1_Ps_N_B_E, VsInRigid_NT_UV1_VShader, Ps_N_B_E_PShader );

// 103
TECHNIQUE(VsInSkinned_NT_UV1_Ps_N_B_E, VsInSkinned_NT_UV1_VShader, Ps_N_B_E_PShader );


// 104
TECHNIQUE(VsInRigid_N_C1_UV1_Ps_B_E, VsInRigid_N_C1_UV1_VShader, Ps_B_E_PShader );

// 105
TECHNIQUE(VsInSkinned_N_C1_UV1_Ps_B_E, VsInSkinned_N_C1_UV1_VShader, Ps_B_E_PShader );


// 106
TECHNIQUE(VsInRigid_NT_C1_UV1_Ps_N_B_E, VsInRigid_NT_C1_UV1_VShader, Ps_N_B_E_PShader );

// 107
TECHNIQUE(VsInSkinned_NT_C1_UV1_Ps_N_B_E, VsInSkinned_NT_C1_UV1_VShader, Ps_N_B_E_PShader );


// 108
TECHNIQUE(VsInRigid_N_C1_UV2_Ps_B_E, VsInRigid_N_C1_UV2_VShader, Ps_B_E_PShader );

// 109
TECHNIQUE(VsInSkinned_N_C1_UV2_Ps_B_E, VsInSkinned_N_C1_UV2_VShader, Ps_B_E_PShader );


// 110
TECHNIQUE(VsInRigid_NT_C1_UV2_Ps_N_B_E, VsInRigid_NT_C1_UV2_VShader, Ps_N_B_E_PShader );

// 111
TECHNIQUE(VsInSkinned_NT_C1_UV2_Ps_N_B_E, VsInSkinned_NT_C1_UV2_VShader, Ps_N_B_E_PShader );


// 112
TECHNIQUE(VsInRigid_N_C1_Ps_A_B_E, VsInRigid_N_C1_VShader, Ps_A_B_E_PShader );

// 113
TECHNIQUE(VsInSkinned_N_C1_Ps_A_B_E, VsInSkinned_N_C1_VShader, Ps_A_B_E_PShader );


// 114
TECHNIQUE(VsInRigid_NT_C1_Ps_N_A_B_E, VsInRigid_NT_C1_VShader, Ps_N_A_B_E_PShader );

// 115
TECHNIQUE(VsInSkinned_NT_C1_Ps_N_A_B_E, VsInSkinned_NT_C1_VShader, Ps_N_A_B_E_PShader );


// 116
TECHNIQUE(VsInRigid_N_UV1_Ps_A_B_E, VsInRigid_N_UV1_VShader, Ps_A_B_E_PShader );

// 117
TECHNIQUE(VsInSkinned_N_UV1_Ps_A_B_E, VsInSkinned_N_UV1_VShader, Ps_A_B_E_PShader );


// 118
TECHNIQUE(VsInRigid_NT_UV1_Ps_N_A_B_E, VsInRigid_NT_UV1_VShader, Ps_N_A_B_E_PShader );

// 119
TECHNIQUE(VsInSkinned_NT_UV1_Ps_N_A_B_E, VsInSkinned_NT_UV1_VShader, Ps_N_A_B_E_PShader );


// 120
TECHNIQUE(VsInRigid_N_C1_UV1_Ps_A_B_E, VsInRigid_N_C1_UV1_VShader, Ps_A_B_E_PShader );

// 121
TECHNIQUE(VsInSkinned_N_C1_UV1_Ps_A_B_E, VsInSkinned_N_C1_UV1_VShader, Ps_A_B_E_PShader );


// 122
TECHNIQUE(VsInRigid_NT_C1_UV1_Ps_N_A_B_E, VsInRigid_NT_C1_UV1_VShader, Ps_N_A_B_E_PShader );

// 123
TECHNIQUE(VsInSkinned_NT_C1_UV1_Ps_N_A_B_E, VsInSkinned_NT_C1_UV1_VShader, Ps_N_A_B_E_PShader );


// 124
TECHNIQUE(VsInRigid_N_C1_UV2_Ps_A_B_E, VsInRigid_N_C1_UV2_VShader, Ps_A_B_E_PShader );

// 125
TECHNIQUE(VsInSkinned_N_C1_UV2_Ps_A_B_E, VsInSkinned_N_C1_UV2_VShader, Ps_A_B_E_PShader );


// 126
TECHNIQUE(VsInRigid_NT_C1_UV2_Ps_N_A_B_E, VsInRigid_NT_C1_UV2_VShader, Ps_N_A_B_E_PShader );

// 127
TECHNIQUE(VsInSkinned_NT_C1_UV2_Ps_N_A_B_E, VsInSkinned_NT_C1_UV2_VShader, Ps_N_A_B_E_PShader );


// 128
TECHNIQUE(VsInRigid_N_C1_Ps_O, VsInRigid_N_C1_VShader, Ps_O_PShader );

// 129
TECHNIQUE(VsInSkinned_N_C1_Ps_O, VsInSkinned_N_C1_VShader, Ps_O_PShader );


// 130
TECHNIQUE(VsInRigid_NT_C1_Ps_N_O, VsInRigid_NT_C1_VShader, Ps_N_O_PShader );

// 131
TECHNIQUE(VsInSkinned_NT_C1_Ps_N_O, VsInSkinned_NT_C1_VShader, Ps_N_O_PShader );


// 132
TECHNIQUE(VsInRigid_N_UV1_Ps_O, VsInRigid_N_UV1_VShader, Ps_O_PShader );

// 133
TECHNIQUE(VsInSkinned_N_UV1_Ps_O, VsInSkinned_N_UV1_VShader, Ps_O_PShader );


// 134
TECHNIQUE(VsInRigid_NT_UV1_Ps_N_O, VsInRigid_NT_UV1_VShader, Ps_N_O_PShader );

// 135
TECHNIQUE(VsInSkinned_NT_UV1_Ps_N_O, VsInSkinned_NT_UV1_VShader, Ps_N_O_PShader );


// 136
TECHNIQUE(VsInRigid_N_C1_UV1_Ps_O, VsInRigid_N_C1_UV1_VShader, Ps_O_PShader );

// 137
TECHNIQUE(VsInSkinned_N_C1_UV1_Ps_O, VsInSkinned_N_C1_UV1_VShader, Ps_O_PShader );


// 138
TECHNIQUE(VsInRigid_NT_C1_UV1_Ps_N_O, VsInRigid_NT_C1_UV1_VShader, Ps_N_O_PShader );

// 139
TECHNIQUE(VsInSkinned_NT_C1_UV1_Ps_N_O, VsInSkinned_NT_C1_UV1_VShader, Ps_N_O_PShader );


// 140
TECHNIQUE(VsInRigid_N_C1_UV2_Ps_O, VsInRigid_N_C1_UV2_VShader, Ps_O_PShader );

// 141
TECHNIQUE(VsInSkinned_N_C1_UV2_Ps_O, VsInSkinned_N_C1_UV2_VShader, Ps_O_PShader );


// 142
TECHNIQUE(VsInRigid_NT_C1_UV2_Ps_N_O, VsInRigid_NT_C1_UV2_VShader, Ps_N_O_PShader );

// 143
TECHNIQUE(VsInSkinned_NT_C1_UV2_Ps_N_O, VsInSkinned_NT_C1_UV2_VShader, Ps_N_O_PShader );


// 144
TECHNIQUE(VsInRigid_N_C1_Ps_A_O, VsInRigid_N_C1_VShader, Ps_A_O_PShader );

// 145
TECHNIQUE(VsInSkinned_N_C1_Ps_A_O, VsInSkinned_N_C1_VShader, Ps_A_O_PShader );


// 146
TECHNIQUE(VsInRigid_NT_C1_Ps_N_A_O, VsInRigid_NT_C1_VShader, Ps_N_A_O_PShader );

// 147
TECHNIQUE(VsInSkinned_NT_C1_Ps_N_A_O, VsInSkinned_NT_C1_VShader, Ps_N_A_O_PShader );


// 148
TECHNIQUE(VsInRigid_N_UV1_Ps_A_O, VsInRigid_N_UV1_VShader, Ps_A_O_PShader );

// 149
TECHNIQUE(VsInSkinned_N_UV1_Ps_A_O, VsInSkinned_N_UV1_VShader, Ps_A_O_PShader );


// 150
TECHNIQUE(VsInRigid_NT_UV1_Ps_N_A_O, VsInRigid_NT_UV1_VShader, Ps_N_A_O_PShader );

// 151
TECHNIQUE(VsInSkinned_NT_UV1_Ps_N_A_O, VsInSkinned_NT_UV1_VShader, Ps_N_A_O_PShader );


// 152
TECHNIQUE(VsInRigid_N_C1_UV1_Ps_A_O, VsInRigid_N_C1_UV1_VShader, Ps_A_O_PShader );

// 153
TECHNIQUE(VsInSkinned_N_C1_UV1_Ps_A_O, VsInSkinned_N_C1_UV1_VShader, Ps_A_O_PShader );


// 154
TECHNIQUE(VsInRigid_NT_C1_UV1_Ps_N_A_O, VsInRigid_NT_C1_UV1_VShader, Ps_N_A_O_PShader );

// 155
TECHNIQUE(VsInSkinned_NT_C1_UV1_Ps_N_A_O, VsInSkinned_NT_C1_UV1_VShader, Ps_N_A_O_PShader );


// 156
TECHNIQUE(VsInRigid_N_C1_UV2_Ps_A_O, VsInRigid_N_C1_UV2_VShader, Ps_A_O_PShader );

// 157
TECHNIQUE(VsInSkinned_N_C1_UV2_Ps_A_O, VsInSkinned_N_C1_UV2_VShader, Ps_A_O_PShader );


// 158
TECHNIQUE(VsInRigid_NT_C1_UV2_Ps_N_A_O, VsInRigid_NT_C1_UV2_VShader, Ps_N_A_O_PShader );

// 159
TECHNIQUE(VsInSkinned_NT_C1_UV2_Ps_N_A_O, VsInSkinned_NT_C1_UV2_VShader, Ps_N_A_O_PShader );


// 160
TECHNIQUE(VsInRigid_N_C1_Ps_B_O, VsInRigid_N_C1_VShader, Ps_B_O_PShader );

// 161
TECHNIQUE(VsInSkinned_N_C1_Ps_B_O, VsInSkinned_N_C1_VShader, Ps_B_O_PShader );


// 162
TECHNIQUE(VsInRigid_NT_C1_Ps_N_B_O, VsInRigid_NT_C1_VShader, Ps_N_B_O_PShader );

// 163
TECHNIQUE(VsInSkinned_NT_C1_Ps_N_B_O, VsInSkinned_NT_C1_VShader, Ps_N_B_O_PShader );


// 164
TECHNIQUE(VsInRigid_N_UV1_Ps_B_O, VsInRigid_N_UV1_VShader, Ps_B_O_PShader );

// 165
TECHNIQUE(VsInSkinned_N_UV1_Ps_B_O, VsInSkinned_N_UV1_VShader, Ps_B_O_PShader );


// 166
TECHNIQUE(VsInRigid_NT_UV1_Ps_N_B_O, VsInRigid_NT_UV1_VShader, Ps_N_B_O_PShader );

// 167
TECHNIQUE(VsInSkinned_NT_UV1_Ps_N_B_O, VsInSkinned_NT_UV1_VShader, Ps_N_B_O_PShader );


// 168
TECHNIQUE(VsInRigid_N_C1_UV1_Ps_B_O, VsInRigid_N_C1_UV1_VShader, Ps_B_O_PShader );

// 169
TECHNIQUE(VsInSkinned_N_C1_UV1_Ps_B_O, VsInSkinned_N_C1_UV1_VShader, Ps_B_O_PShader );


// 170
TECHNIQUE(VsInRigid_NT_C1_UV1_Ps_N_B_O, VsInRigid_NT_C1_UV1_VShader, Ps_N_B_O_PShader );

// 171
TECHNIQUE(VsInSkinned_NT_C1_UV1_Ps_N_B_O, VsInSkinned_NT_C1_UV1_VShader, Ps_N_B_O_PShader );


// 172
TECHNIQUE(VsInRigid_N_C1_UV2_Ps_B_O, VsInRigid_N_C1_UV2_VShader, Ps_B_O_PShader );

// 173
TECHNIQUE(VsInSkinned_N_C1_UV2_Ps_B_O, VsInSkinned_N_C1_UV2_VShader, Ps_B_O_PShader );


// 174
TECHNIQUE(VsInRigid_NT_C1_UV2_Ps_N_B_O, VsInRigid_NT_C1_UV2_VShader, Ps_N_B_O_PShader );

// 175
TECHNIQUE(VsInSkinned_NT_C1_UV2_Ps_N_B_O, VsInSkinned_NT_C1_UV2_VShader, Ps_N_B_O_PShader );


// 176
TECHNIQUE(VsInRigid_N_C1_Ps_A_B_O, VsInRigid_N_C1_VShader, Ps_A_B_O_PShader );

// 177
TECHNIQUE(VsInSkinned_N_C1_Ps_A_B_O, VsInSkinned_N_C1_VShader, Ps_A_B_O_PShader );


// 178
TECHNIQUE(VsInRigid_NT_C1_Ps_N_A_B_O, VsInRigid_NT_C1_VShader, Ps_N_A_B_O_PShader );

// 179
TECHNIQUE(VsInSkinned_NT_C1_Ps_N_A_B_O, VsInSkinned_NT_C1_VShader, Ps_N_A_B_O_PShader );


// 180
TECHNIQUE(VsInRigid_N_UV1_Ps_A_B_O, VsInRigid_N_UV1_VShader, Ps_A_B_O_PShader );

// 181
TECHNIQUE(VsInSkinned_N_UV1_Ps_A_B_O, VsInSkinned_N_UV1_VShader, Ps_A_B_O_PShader );


// 182
TECHNIQUE(VsInRigid_NT_UV1_Ps_N_A_B_O, VsInRigid_NT_UV1_VShader, Ps_N_A_B_O_PShader );

// 183
TECHNIQUE(VsInSkinned_NT_UV1_Ps_N_A_B_O, VsInSkinned_NT_UV1_VShader, Ps_N_A_B_O_PShader );


// 184
TECHNIQUE(VsInRigid_N_C1_UV1_Ps_A_B_O, VsInRigid_N_C1_UV1_VShader, Ps_A_B_O_PShader );

// 185
TECHNIQUE(VsInSkinned_N_C1_UV1_Ps_A_B_O, VsInSkinned_N_C1_UV1_VShader, Ps_A_B_O_PShader );


// 186
TECHNIQUE(VsInRigid_NT_C1_UV1_Ps_N_A_B_O, VsInRigid_NT_C1_UV1_VShader, Ps_N_A_B_O_PShader );

// 187
TECHNIQUE(VsInSkinned_NT_C1_UV1_Ps_N_A_B_O, VsInSkinned_NT_C1_UV1_VShader, Ps_N_A_B_O_PShader );


// 188
TECHNIQUE(VsInRigid_N_C1_UV2_Ps_A_B_O, VsInRigid_N_C1_UV2_VShader, Ps_A_B_O_PShader );

// 189
TECHNIQUE(VsInSkinned_N_C1_UV2_Ps_A_B_O, VsInSkinned_N_C1_UV2_VShader, Ps_A_B_O_PShader );


// 190
TECHNIQUE(VsInRigid_NT_C1_UV2_Ps_N_A_B_O, VsInRigid_NT_C1_UV2_VShader, Ps_N_A_B_O_PShader );

// 191
TECHNIQUE(VsInSkinned_NT_C1_UV2_Ps_N_A_B_O, VsInSkinned_NT_C1_UV2_VShader, Ps_N_A_B_O_PShader );


// 192
TECHNIQUE(VsInRigid_N_C1_Ps_E_O, VsInRigid_N_C1_VShader, Ps_E_O_PShader );

// 193
TECHNIQUE(VsInSkinned_N_C1_Ps_E_O, VsInSkinned_N_C1_VShader, Ps_E_O_PShader );


// 194
TECHNIQUE(VsInRigid_NT_C1_Ps_N_E_O, VsInRigid_NT_C1_VShader, Ps_N_E_O_PShader );

// 195
TECHNIQUE(VsInSkinned_NT_C1_Ps_N_E_O, VsInSkinned_NT_C1_VShader, Ps_N_E_O_PShader );


// 196
TECHNIQUE(VsInRigid_N_UV1_Ps_E_O, VsInRigid_N_UV1_VShader, Ps_E_O_PShader );

// 197
TECHNIQUE(VsInSkinned_N_UV1_Ps_E_O, VsInSkinned_N_UV1_VShader, Ps_E_O_PShader );


// 198
TECHNIQUE(VsInRigid_NT_UV1_Ps_N_E_O, VsInRigid_NT_UV1_VShader, Ps_N_E_O_PShader );

// 199
TECHNIQUE(VsInSkinned_NT_UV1_Ps_N_E_O, VsInSkinned_NT_UV1_VShader, Ps_N_E_O_PShader );


// 200
TECHNIQUE(VsInRigid_N_C1_UV1_Ps_E_O, VsInRigid_N_C1_UV1_VShader, Ps_E_O_PShader );

// 201
TECHNIQUE(VsInSkinned_N_C1_UV1_Ps_E_O, VsInSkinned_N_C1_UV1_VShader, Ps_E_O_PShader );


// 202
TECHNIQUE(VsInRigid_NT_C1_UV1_Ps_N_E_O, VsInRigid_NT_C1_UV1_VShader, Ps_N_E_O_PShader );

// 203
TECHNIQUE(VsInSkinned_NT_C1_UV1_Ps_N_E_O, VsInSkinned_NT_C1_UV1_VShader, Ps_N_E_O_PShader );


// 204
TECHNIQUE(VsInRigid_N_C1_UV2_Ps_E_O, VsInRigid_N_C1_UV2_VShader, Ps_E_O_PShader );

// 205
TECHNIQUE(VsInSkinned_N_C1_UV2_Ps_E_O, VsInSkinned_N_C1_UV2_VShader, Ps_E_O_PShader );


// 206
TECHNIQUE(VsInRigid_NT_C1_UV2_Ps_N_E_O, VsInRigid_NT_C1_UV2_VShader, Ps_N_E_O_PShader );

// 207
TECHNIQUE(VsInSkinned_NT_C1_UV2_Ps_N_E_O, VsInSkinned_NT_C1_UV2_VShader, Ps_N_E_O_PShader );


// 208
TECHNIQUE(VsInRigid_N_C1_Ps_A_E_O, VsInRigid_N_C1_VShader, Ps_A_E_O_PShader );

// 209
TECHNIQUE(VsInSkinned_N_C1_Ps_A_E_O, VsInSkinned_N_C1_VShader, Ps_A_E_O_PShader );


// 210
TECHNIQUE(VsInRigid_NT_C1_Ps_N_A_E_O, VsInRigid_NT_C1_VShader, Ps_N_A_E_O_PShader );

// 211
TECHNIQUE(VsInSkinned_NT_C1_Ps_N_A_E_O, VsInSkinned_NT_C1_VShader, Ps_N_A_E_O_PShader );


// 212
TECHNIQUE(VsInRigid_N_UV1_Ps_A_E_O, VsInRigid_N_UV1_VShader, Ps_A_E_O_PShader );

// 213
TECHNIQUE(VsInSkinned_N_UV1_Ps_A_E_O, VsInSkinned_N_UV1_VShader, Ps_A_E_O_PShader );


// 214
TECHNIQUE(VsInRigid_NT_UV1_Ps_N_A_E_O, VsInRigid_NT_UV1_VShader, Ps_N_A_E_O_PShader );

// 215
TECHNIQUE(VsInSkinned_NT_UV1_Ps_N_A_E_O, VsInSkinned_NT_UV1_VShader, Ps_N_A_E_O_PShader );


// 216
TECHNIQUE(VsInRigid_N_C1_UV1_Ps_A_E_O, VsInRigid_N_C1_UV1_VShader, Ps_A_E_O_PShader );

// 217
TECHNIQUE(VsInSkinned_N_C1_UV1_Ps_A_E_O, VsInSkinned_N_C1_UV1_VShader, Ps_A_E_O_PShader );


// 218
TECHNIQUE(VsInRigid_NT_C1_UV1_Ps_N_A_E_O, VsInRigid_NT_C1_UV1_VShader, Ps_N_A_E_O_PShader );

// 219
TECHNIQUE(VsInSkinned_NT_C1_UV1_Ps_N_A_E_O, VsInSkinned_NT_C1_UV1_VShader, Ps_N_A_E_O_PShader );


// 220
TECHNIQUE(VsInRigid_N_C1_UV2_Ps_A_E_O, VsInRigid_N_C1_UV2_VShader, Ps_A_E_O_PShader );

// 221
TECHNIQUE(VsInSkinned_N_C1_UV2_Ps_A_E_O, VsInSkinned_N_C1_UV2_VShader, Ps_A_E_O_PShader );


// 222
TECHNIQUE(VsInRigid_NT_C1_UV2_Ps_N_A_E_O, VsInRigid_NT_C1_UV2_VShader, Ps_N_A_E_O_PShader );

// 223
TECHNIQUE(VsInSkinned_NT_C1_UV2_Ps_N_A_E_O, VsInSkinned_NT_C1_UV2_VShader, Ps_N_A_E_O_PShader );


// 224
TECHNIQUE(VsInRigid_N_C1_Ps_B_E_O, VsInRigid_N_C1_VShader, Ps_B_E_O_PShader );

// 225
TECHNIQUE(VsInSkinned_N_C1_Ps_B_E_O, VsInSkinned_N_C1_VShader, Ps_B_E_O_PShader );


// 226
TECHNIQUE(VsInRigid_NT_C1_Ps_N_B_E_O, VsInRigid_NT_C1_VShader, Ps_N_B_E_O_PShader );

// 227
TECHNIQUE(VsInSkinned_NT_C1_Ps_N_B_E_O, VsInSkinned_NT_C1_VShader, Ps_N_B_E_O_PShader );


// 228
TECHNIQUE(VsInRigid_N_UV1_Ps_B_E_O, VsInRigid_N_UV1_VShader, Ps_B_E_O_PShader );

// 229
TECHNIQUE(VsInSkinned_N_UV1_Ps_B_E_O, VsInSkinned_N_UV1_VShader, Ps_B_E_O_PShader );


// 230
TECHNIQUE(VsInRigid_NT_UV1_Ps_N_B_E_O, VsInRigid_NT_UV1_VShader, Ps_N_B_E_O_PShader );

// 231
TECHNIQUE(VsInSkinned_NT_UV1_Ps_N_B_E_O, VsInSkinned_NT_UV1_VShader, Ps_N_B_E_O_PShader );


// 232
TECHNIQUE(VsInRigid_N_C1_UV1_Ps_B_E_O, VsInRigid_N_C1_UV1_VShader, Ps_B_E_O_PShader );

// 233
TECHNIQUE(VsInSkinned_N_C1_UV1_Ps_B_E_O, VsInSkinned_N_C1_UV1_VShader, Ps_B_E_O_PShader );


// 234
TECHNIQUE(VsInRigid_NT_C1_UV1_Ps_N_B_E_O, VsInRigid_NT_C1_UV1_VShader, Ps_N_B_E_O_PShader );

// 235
TECHNIQUE(VsInSkinned_NT_C1_UV1_Ps_N_B_E_O, VsInSkinned_NT_C1_UV1_VShader, Ps_N_B_E_O_PShader );


// 236
TECHNIQUE(VsInRigid_N_C1_UV2_Ps_B_E_O, VsInRigid_N_C1_UV2_VShader, Ps_B_E_O_PShader );

// 237
TECHNIQUE(VsInSkinned_N_C1_UV2_Ps_B_E_O, VsInSkinned_N_C1_UV2_VShader, Ps_B_E_O_PShader );


// 238
TECHNIQUE(VsInRigid_NT_C1_UV2_Ps_N_B_E_O, VsInRigid_NT_C1_UV2_VShader, Ps_N_B_E_O_PShader );

// 239
TECHNIQUE(VsInSkinned_NT_C1_UV2_Ps_N_B_E_O, VsInSkinned_NT_C1_UV2_VShader, Ps_N_B_E_O_PShader );


// 240
TECHNIQUE(VsInRigid_N_C1_Ps_A_B_E_O, VsInRigid_N_C1_VShader, Ps_A_B_E_O_PShader );

// 241
TECHNIQUE(VsInSkinned_N_C1_Ps_A_B_E_O, VsInSkinned_N_C1_VShader, Ps_A_B_E_O_PShader );


// 242
TECHNIQUE(VsInRigid_NT_C1_Ps_N_A_B_E_O, VsInRigid_NT_C1_VShader, Ps_N_A_B_E_O_PShader );

// 243
TECHNIQUE(VsInSkinned_NT_C1_Ps_N_A_B_E_O, VsInSkinned_NT_C1_VShader, Ps_N_A_B_E_O_PShader );


// 244
TECHNIQUE(VsInRigid_N_UV1_Ps_A_B_E_O, VsInRigid_N_UV1_VShader, Ps_A_B_E_O_PShader );

// 245
TECHNIQUE(VsInSkinned_N_UV1_Ps_A_B_E_O, VsInSkinned_N_UV1_VShader, Ps_A_B_E_O_PShader );


// 246
TECHNIQUE(VsInRigid_NT_UV1_Ps_N_A_B_E_O, VsInRigid_NT_UV1_VShader, Ps_N_A_B_E_O_PShader );

// 247
TECHNIQUE(VsInSkinned_NT_UV1_Ps_N_A_B_E_O, VsInSkinned_NT_UV1_VShader, Ps_N_A_B_E_O_PShader );


// 248
TECHNIQUE(VsInRigid_N_C1_UV1_Ps_A_B_E_O, VsInRigid_N_C1_UV1_VShader, Ps_A_B_E_O_PShader );

// 249
TECHNIQUE(VsInSkinned_N_C1_UV1_Ps_A_B_E_O, VsInSkinned_N_C1_UV1_VShader, Ps_A_B_E_O_PShader );


// 250
TECHNIQUE(VsInRigid_NT_C1_UV1_Ps_N_A_B_E_O, VsInRigid_NT_C1_UV1_VShader, Ps_N_A_B_E_O_PShader );

// 251
TECHNIQUE(VsInSkinned_NT_C1_UV1_Ps_N_A_B_E_O, VsInSkinned_NT_C1_UV1_VShader, Ps_N_A_B_E_O_PShader );


// 252
TECHNIQUE(VsInRigid_N_C1_UV2_Ps_A_B_E_O, VsInRigid_N_C1_UV2_VShader, Ps_A_B_E_O_PShader );

// 253
TECHNIQUE(VsInSkinned_N_C1_UV2_Ps_A_B_E_O, VsInSkinned_N_C1_UV2_VShader, Ps_A_B_E_O_PShader );


// 254
TECHNIQUE(VsInRigid_NT_C1_UV2_Ps_N_A_B_E_O, VsInRigid_NT_C1_UV2_VShader, Ps_N_A_B_E_O_PShader );

// 255
TECHNIQUE(VsInSkinned_NT_C1_UV2_Ps_N_A_B_E_O, VsInSkinned_NT_C1_UV2_VShader, Ps_N_A_B_E_O_PShader );





