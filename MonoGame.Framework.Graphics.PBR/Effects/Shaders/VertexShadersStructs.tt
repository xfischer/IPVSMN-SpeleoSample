<#@ template debug="false" hostspecific="false" language="c#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".fx" #>
//-----------------------------------------------------
//         Autogenerated code - DO NOT EDIT -
//       Edit VertexShadersStructs.tt and save.
//-----------------------------------------------------

float4x4 World;

#define SKINNED_EFFECT_MAX_BONES   128

float4x3 Bones[SKINNED_EFFECT_MAX_BONES]; // 4x3 is enough, and saves constants 

float4x3 CalculateBoneMatrix(float4 BlendIndices, float4 BlendWeights)
{
    float sum = BlendWeights.x + BlendWeights.y + BlendWeights.z + BlendWeights.w;

    float4x3 mbones =
        Bones[BlendIndices.x] * (float)BlendWeights.x / sum +
        Bones[BlendIndices.y] * (float)BlendWeights.y / sum +
        Bones[BlendIndices.z] * (float)BlendWeights.z / sum +
        Bones[BlendIndices.w] * (float)BlendWeights.w / sum;

    return mbones;
}

<#


var vsMatPermutations = new [] {0,1,2,3};
var vsSrfPermutations = new [] {0,1,2};

foreach(int vsMat in vsMatPermutations)
{
    // vertex material permutations
    // 0 - color
    // 1 - uv0
    // 2 - color + uv0
    // 3 - color + uv0 + uv1

    var HASCOLOR = vsMat != 1;
    var HASTXUV0 = vsMat != 0;
    var HASTXUV1 = vsMat == 3;

    foreach(int vsSrf in vsSrfPermutations)
    {
        // vertex surface permutations
        // 0 - nothing (used by Unlit shaders)
        // 1 - normal
        // 2 - normal + tangent        

        var HASNORMAL = vsSrf != 0;
        var HASTANGENT = vsSrf >= 2;

        // define vertex shader name

        var vsName = string.Empty;

        if (HASNORMAL) vsName +="_N";
        if (HASTANGENT) vsName +="T";        
    
        if (HASCOLOR) vsName +="_C1";
        if (HASTXUV0 && !HASTXUV1) vsName +="_UV1";
        if (HASTXUV0 && HASTXUV1) vsName +="_UV2";

        var RIGIDVERTEX = "VsInRigid" + vsName;
        var SKINNEDVERTEX = "VsInSkinned" + vsName;

#>

struct <#= RIGIDVERTEX#>
{
    float3 Position : POSITION0;

    <# if (HASNORMAL) { #>float3 Normal : Normal0;<# } #>   
    <# if (HASTANGENT) { #>float4 Tangent: Tangent0;<# } #> 
    <# if (HASCOLOR) { #>float4 Color: COLOR0;<#}#> 
    <# if (HASTXUV0) { #>float2 TextureCoordinate0 : TEXCOORD0;<# } #>  
    <# if (HASTXUV1) { #>float2 TextureCoordinate1 : TEXCOORD1;<# } #>

    float4 GetWorldPosition()
    {
        return mul(float4(this.Position, 1.0f), World);
    }

    <# if (HASTANGENT) { #>float3x3 GetTangentBasis()
    {
        // https://github.com/KhronosGroup/glTF-Sample-Viewer/blob/35df3ff146e88cc585401db546fb9ee3366607d2/src/shaders/primitive.vert#L103

        float3 normalW = mul(float4(this.Normal, 0.0), World).xyz;
        float3 tangentW = mul(float4(this.Tangent.xyz, 0.0), World).xyz;

        normalW = normalize(normalW);
        tangentW = normalize(tangentW);

        float3 bitangentW = cross(normalW, tangentW) * this.Tangent.w;

        return float3x3(tangentW, bitangentW, normalW);
    }
    <# } else if (HASNORMAL) { #>float3x3 GetTangentBasis()
    {
        float3 normalW = mul(float4(this.Normal, 0.0), World).xyz;
        normalW = normalize(normalW);
        return float3x3(float3(0, 0, 0), float3(0, 0, 0), normalW);
    }<# } #>    
};

struct <#= SKINNEDVERTEX#>
{
    float3 Position : POSITION0;

    <# if (HASNORMAL) { #>float3 Normal : Normal0;<# } #>   
    <# if (HASTANGENT) { #>float4 Tangent: Tangent0;<# } #> 
    <# if (HASCOLOR) { #>float4 Color: COLOR0;<#}#> 
    <# if (HASTXUV0) { #>float2 TextureCoordinate0 : TEXCOORD0;<# } #>  
    <# if (HASTXUV1) { #>float2 TextureCoordinate1 : TEXCOORD1;<# } #>  

    uint4 BlendIndices : BLENDINDICES0;
    float4 BlendWeights : BLENDWEIGHT0;

    <#= RIGIDVERTEX#> GetTransformedByBones()    
    {
        float4x3 mbones = CalculateBoneMatrix(this.BlendIndices, this.BlendWeights);

        <#= RIGIDVERTEX#> output;

        output.Position = mul(float4(this.Position, 1.0f), mbones).xyz;

        <# if (HASNORMAL) { #>output.Normal = mul(float4(this.Normal, 0), mbones).xyz;<# } #>  
        <# if (HASTANGENT) { #>float3 tgt = mul(float4(this.Tangent.xyz, 0), mbones).xyz;
        output.Tangent = float4(tgt, this.Tangent.w);<# } #>   

        <# if (HASCOLOR) { #>output.Color = this.Color;<# } #> 
        <# if (HASTXUV0) { #>output.TextureCoordinate0 = this.TextureCoordinate0;<# } #>   
        <# if (HASTXUV1) { #>output.TextureCoordinate1 = this.TextureCoordinate1;<# } #>   

        return output;
    }
};

<# } } #>




