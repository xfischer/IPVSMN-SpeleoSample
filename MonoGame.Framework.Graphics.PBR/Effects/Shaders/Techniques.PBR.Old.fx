//-----------------------------------------------------
//         Autogenerated code - DO NOT EDIT -
//           Edit Permutations.tt and save.
//-----------------------------------------------------

#include "PBR.fx"
#include "VertexShaders.fx"


float4 PsNormals(VsOutTexNorm input) : COLOR0
{
	return PsShader(input
	, false
	, false
	, false
	, false
	, false
 // , false // uncomment to add IBL parameter
	);
}


float4 PsTangents(VsOutTexNorm input) : COLOR0
{
	return PsShader(input
	, true
	, false
	, false
	, false
	, false
 // , false // uncomment to add IBL parameter
	);
}


float4 PsNormalsPrimary(VsOutTexNorm input) : COLOR0
{
	return PsShader(input
	, false
	, true
	, false
	, false
	, false
 // , false // uncomment to add IBL parameter
	);
}


float4 PsTangentsPrimary(VsOutTexNorm input) : COLOR0
{
	return PsShader(input
	, true
	, true
	, false
	, false
	, false
 // , false // uncomment to add IBL parameter
	);
}


float4 PsNormalsSecondary(VsOutTexNorm input) : COLOR0
{
	return PsShader(input
	, false
	, false
	, true
	, false
	, false
 // , false // uncomment to add IBL parameter
	);
}


float4 PsTangentsSecondary(VsOutTexNorm input) : COLOR0
{
	return PsShader(input
	, true
	, false
	, true
	, false
	, false
 // , false // uncomment to add IBL parameter
	);
}


float4 PsNormalsPrimarySecondary(VsOutTexNorm input) : COLOR0
{
	return PsShader(input
	, false
	, true
	, true
	, false
	, false
 // , false // uncomment to add IBL parameter
	);
}


float4 PsTangentsPrimarySecondary(VsOutTexNorm input) : COLOR0
{
	return PsShader(input
	, true
	, true
	, true
	, false
	, false
 // , false // uncomment to add IBL parameter
	);
}


float4 PsNormalsEmissive(VsOutTexNorm input) : COLOR0
{
	return PsShader(input
	, false
	, false
	, false
	, true
	, false
 // , false // uncomment to add IBL parameter
	);
}


float4 PsTangentsEmissive(VsOutTexNorm input) : COLOR0
{
	return PsShader(input
	, true
	, false
	, false
	, true
	, false
 // , false // uncomment to add IBL parameter
	);
}


float4 PsNormalsPrimaryEmissive(VsOutTexNorm input) : COLOR0
{
	return PsShader(input
	, false
	, true
	, false
	, true
	, false
 // , false // uncomment to add IBL parameter
	);
}


float4 PsTangentsPrimaryEmissive(VsOutTexNorm input) : COLOR0
{
	return PsShader(input
	, true
	, true
	, false
	, true
	, false
 // , false // uncomment to add IBL parameter
	);
}


float4 PsNormalsSecondaryEmissive(VsOutTexNorm input) : COLOR0
{
	return PsShader(input
	, false
	, false
	, true
	, true
	, false
 // , false // uncomment to add IBL parameter
	);
}


float4 PsTangentsSecondaryEmissive(VsOutTexNorm input) : COLOR0
{
	return PsShader(input
	, true
	, false
	, true
	, true
	, false
 // , false // uncomment to add IBL parameter
	);
}


float4 PsNormalsPrimarySecondaryEmissive(VsOutTexNorm input) : COLOR0
{
	return PsShader(input
	, false
	, true
	, true
	, true
	, false
 // , false // uncomment to add IBL parameter
	);
}


float4 PsTangentsPrimarySecondaryEmissive(VsOutTexNorm input) : COLOR0
{
	return PsShader(input
	, true
	, true
	, true
	, true
	, false
 // , false // uncomment to add IBL parameter
	);
}


float4 PsNormalsOpacity(VsOutTexNorm input) : COLOR0
{
	return PsShader(input
	, false
	, false
	, false
	, false
	, true
 // , false // uncomment to add IBL parameter
	);
}


float4 PsTangentsOpacity(VsOutTexNorm input) : COLOR0
{
	return PsShader(input
	, true
	, false
	, false
	, false
	, true
 // , false // uncomment to add IBL parameter
	);
}


float4 PsNormalsPrimaryOpacity(VsOutTexNorm input) : COLOR0
{
	return PsShader(input
	, false
	, true
	, false
	, false
	, true
 // , false // uncomment to add IBL parameter
	);
}


float4 PsTangentsPrimaryOpacity(VsOutTexNorm input) : COLOR0
{
	return PsShader(input
	, true
	, true
	, false
	, false
	, true
 // , false // uncomment to add IBL parameter
	);
}


float4 PsNormalsSecondaryOpacity(VsOutTexNorm input) : COLOR0
{
	return PsShader(input
	, false
	, false
	, true
	, false
	, true
 // , false // uncomment to add IBL parameter
	);
}


float4 PsTangentsSecondaryOpacity(VsOutTexNorm input) : COLOR0
{
	return PsShader(input
	, true
	, false
	, true
	, false
	, true
 // , false // uncomment to add IBL parameter
	);
}


float4 PsNormalsPrimarySecondaryOpacity(VsOutTexNorm input) : COLOR0
{
	return PsShader(input
	, false
	, true
	, true
	, false
	, true
 // , false // uncomment to add IBL parameter
	);
}


float4 PsTangentsPrimarySecondaryOpacity(VsOutTexNorm input) : COLOR0
{
	return PsShader(input
	, true
	, true
	, true
	, false
	, true
 // , false // uncomment to add IBL parameter
	);
}


float4 PsNormalsEmissiveOpacity(VsOutTexNorm input) : COLOR0
{
	return PsShader(input
	, false
	, false
	, false
	, true
	, true
 // , false // uncomment to add IBL parameter
	);
}


float4 PsTangentsEmissiveOpacity(VsOutTexNorm input) : COLOR0
{
	return PsShader(input
	, true
	, false
	, false
	, true
	, true
 // , false // uncomment to add IBL parameter
	);
}


float4 PsNormalsPrimaryEmissiveOpacity(VsOutTexNorm input) : COLOR0
{
	return PsShader(input
	, false
	, true
	, false
	, true
	, true
 // , false // uncomment to add IBL parameter
	);
}


float4 PsTangentsPrimaryEmissiveOpacity(VsOutTexNorm input) : COLOR0
{
	return PsShader(input
	, true
	, true
	, false
	, true
	, true
 // , false // uncomment to add IBL parameter
	);
}


float4 PsNormalsSecondaryEmissiveOpacity(VsOutTexNorm input) : COLOR0
{
	return PsShader(input
	, false
	, false
	, true
	, true
	, true
 // , false // uncomment to add IBL parameter
	);
}


float4 PsTangentsSecondaryEmissiveOpacity(VsOutTexNorm input) : COLOR0
{
	return PsShader(input
	, true
	, false
	, true
	, true
	, true
 // , false // uncomment to add IBL parameter
	);
}


float4 PsNormalsPrimarySecondaryEmissiveOpacity(VsOutTexNorm input) : COLOR0
{
	return PsShader(input
	, false
	, true
	, true
	, true
	, true
 // , false // uncomment to add IBL parameter
	);
}


float4 PsTangentsPrimarySecondaryEmissiveOpacity(VsOutTexNorm input) : COLOR0
{
	return PsShader(input
	, true
	, true
	, true
	, true
	, true
 // , false // uncomment to add IBL parameter
	);
}



TECHNIQUE(VsRigid_PsNormals, VsRigid, PsNormals );

TECHNIQUE(VsSkinned_PsNormals, VsSkinned, PsNormals );

TECHNIQUE(VsRigid_PsNormals, VsRigid, PsNormals );

TECHNIQUE(VsSkinned_PsNormals, VsSkinned, PsNormals );

TECHNIQUE(VsRigidBasis_PsTangents, VsRigidBasis, PsTangents );

TECHNIQUE(VsSkinnedBasis_PsTangents, VsSkinnedBasis, PsTangents );

TECHNIQUE(VsRigidBasis_PsTangents, VsRigidBasis, PsTangents );

TECHNIQUE(VsSkinnedBasis_PsTangents, VsSkinnedBasis, PsTangents );

TECHNIQUE(VsRigid_PsNormalsPrimary, VsRigid, PsNormalsPrimary );

TECHNIQUE(VsSkinned_PsNormalsPrimary, VsSkinned, PsNormalsPrimary );

TECHNIQUE(VsRigid_PsNormalsPrimary, VsRigid, PsNormalsPrimary );

TECHNIQUE(VsSkinned_PsNormalsPrimary, VsSkinned, PsNormalsPrimary );

TECHNIQUE(VsRigidBasis_PsTangentsPrimary, VsRigidBasis, PsTangentsPrimary );

TECHNIQUE(VsSkinnedBasis_PsTangentsPrimary, VsSkinnedBasis, PsTangentsPrimary );

TECHNIQUE(VsRigidBasis_PsTangentsPrimary, VsRigidBasis, PsTangentsPrimary );

TECHNIQUE(VsSkinnedBasis_PsTangentsPrimary, VsSkinnedBasis, PsTangentsPrimary );

TECHNIQUE(VsRigid_PsNormalsSecondary, VsRigid, PsNormalsSecondary );

TECHNIQUE(VsSkinned_PsNormalsSecondary, VsSkinned, PsNormalsSecondary );

TECHNIQUE(VsRigid_PsNormalsSecondary, VsRigid, PsNormalsSecondary );

TECHNIQUE(VsSkinned_PsNormalsSecondary, VsSkinned, PsNormalsSecondary );

TECHNIQUE(VsRigidBasis_PsTangentsSecondary, VsRigidBasis, PsTangentsSecondary );

TECHNIQUE(VsSkinnedBasis_PsTangentsSecondary, VsSkinnedBasis, PsTangentsSecondary );

TECHNIQUE(VsRigidBasis_PsTangentsSecondary, VsRigidBasis, PsTangentsSecondary );

TECHNIQUE(VsSkinnedBasis_PsTangentsSecondary, VsSkinnedBasis, PsTangentsSecondary );

TECHNIQUE(VsRigid_PsNormalsPrimarySecondary, VsRigid, PsNormalsPrimarySecondary );

TECHNIQUE(VsSkinned_PsNormalsPrimarySecondary, VsSkinned, PsNormalsPrimarySecondary );

TECHNIQUE(VsRigid_PsNormalsPrimarySecondary, VsRigid, PsNormalsPrimarySecondary );

TECHNIQUE(VsSkinned_PsNormalsPrimarySecondary, VsSkinned, PsNormalsPrimarySecondary );

TECHNIQUE(VsRigidBasis_PsTangentsPrimarySecondary, VsRigidBasis, PsTangentsPrimarySecondary );

TECHNIQUE(VsSkinnedBasis_PsTangentsPrimarySecondary, VsSkinnedBasis, PsTangentsPrimarySecondary );

TECHNIQUE(VsRigidBasis_PsTangentsPrimarySecondary, VsRigidBasis, PsTangentsPrimarySecondary );

TECHNIQUE(VsSkinnedBasis_PsTangentsPrimarySecondary, VsSkinnedBasis, PsTangentsPrimarySecondary );

TECHNIQUE(VsRigid_PsNormalsEmissive, VsRigid, PsNormalsEmissive );

TECHNIQUE(VsSkinned_PsNormalsEmissive, VsSkinned, PsNormalsEmissive );

TECHNIQUE(VsRigid_PsNormalsEmissive, VsRigid, PsNormalsEmissive );

TECHNIQUE(VsSkinned_PsNormalsEmissive, VsSkinned, PsNormalsEmissive );

TECHNIQUE(VsRigidBasis_PsTangentsEmissive, VsRigidBasis, PsTangentsEmissive );

TECHNIQUE(VsSkinnedBasis_PsTangentsEmissive, VsSkinnedBasis, PsTangentsEmissive );

TECHNIQUE(VsRigidBasis_PsTangentsEmissive, VsRigidBasis, PsTangentsEmissive );

TECHNIQUE(VsSkinnedBasis_PsTangentsEmissive, VsSkinnedBasis, PsTangentsEmissive );

TECHNIQUE(VsRigid_PsNormalsPrimaryEmissive, VsRigid, PsNormalsPrimaryEmissive );

TECHNIQUE(VsSkinned_PsNormalsPrimaryEmissive, VsSkinned, PsNormalsPrimaryEmissive );

TECHNIQUE(VsRigid_PsNormalsPrimaryEmissive, VsRigid, PsNormalsPrimaryEmissive );

TECHNIQUE(VsSkinned_PsNormalsPrimaryEmissive, VsSkinned, PsNormalsPrimaryEmissive );

TECHNIQUE(VsRigidBasis_PsTangentsPrimaryEmissive, VsRigidBasis, PsTangentsPrimaryEmissive );

TECHNIQUE(VsSkinnedBasis_PsTangentsPrimaryEmissive, VsSkinnedBasis, PsTangentsPrimaryEmissive );

TECHNIQUE(VsRigidBasis_PsTangentsPrimaryEmissive, VsRigidBasis, PsTangentsPrimaryEmissive );

TECHNIQUE(VsSkinnedBasis_PsTangentsPrimaryEmissive, VsSkinnedBasis, PsTangentsPrimaryEmissive );

TECHNIQUE(VsRigid_PsNormalsSecondaryEmissive, VsRigid, PsNormalsSecondaryEmissive );

TECHNIQUE(VsSkinned_PsNormalsSecondaryEmissive, VsSkinned, PsNormalsSecondaryEmissive );

TECHNIQUE(VsRigid_PsNormalsSecondaryEmissive, VsRigid, PsNormalsSecondaryEmissive );

TECHNIQUE(VsSkinned_PsNormalsSecondaryEmissive, VsSkinned, PsNormalsSecondaryEmissive );

TECHNIQUE(VsRigidBasis_PsTangentsSecondaryEmissive, VsRigidBasis, PsTangentsSecondaryEmissive );

TECHNIQUE(VsSkinnedBasis_PsTangentsSecondaryEmissive, VsSkinnedBasis, PsTangentsSecondaryEmissive );

TECHNIQUE(VsRigidBasis_PsTangentsSecondaryEmissive, VsRigidBasis, PsTangentsSecondaryEmissive );

TECHNIQUE(VsSkinnedBasis_PsTangentsSecondaryEmissive, VsSkinnedBasis, PsTangentsSecondaryEmissive );

TECHNIQUE(VsRigid_PsNormalsPrimarySecondaryEmissive, VsRigid, PsNormalsPrimarySecondaryEmissive );

TECHNIQUE(VsSkinned_PsNormalsPrimarySecondaryEmissive, VsSkinned, PsNormalsPrimarySecondaryEmissive );

TECHNIQUE(VsRigid_PsNormalsPrimarySecondaryEmissive, VsRigid, PsNormalsPrimarySecondaryEmissive );

TECHNIQUE(VsSkinned_PsNormalsPrimarySecondaryEmissive, VsSkinned, PsNormalsPrimarySecondaryEmissive );

TECHNIQUE(VsRigidBasis_PsTangentsPrimarySecondaryEmissive, VsRigidBasis, PsTangentsPrimarySecondaryEmissive );

TECHNIQUE(VsSkinnedBasis_PsTangentsPrimarySecondaryEmissive, VsSkinnedBasis, PsTangentsPrimarySecondaryEmissive );

TECHNIQUE(VsRigidBasis_PsTangentsPrimarySecondaryEmissive, VsRigidBasis, PsTangentsPrimarySecondaryEmissive );

TECHNIQUE(VsSkinnedBasis_PsTangentsPrimarySecondaryEmissive, VsSkinnedBasis, PsTangentsPrimarySecondaryEmissive );

TECHNIQUE(VsRigid_PsNormalsOpacity, VsRigid, PsNormalsOpacity );

TECHNIQUE(VsSkinned_PsNormalsOpacity, VsSkinned, PsNormalsOpacity );

TECHNIQUE(VsRigid_PsNormalsOpacity, VsRigid, PsNormalsOpacity );

TECHNIQUE(VsSkinned_PsNormalsOpacity, VsSkinned, PsNormalsOpacity );

TECHNIQUE(VsRigidBasis_PsTangentsOpacity, VsRigidBasis, PsTangentsOpacity );

TECHNIQUE(VsSkinnedBasis_PsTangentsOpacity, VsSkinnedBasis, PsTangentsOpacity );

TECHNIQUE(VsRigidBasis_PsTangentsOpacity, VsRigidBasis, PsTangentsOpacity );

TECHNIQUE(VsSkinnedBasis_PsTangentsOpacity, VsSkinnedBasis, PsTangentsOpacity );

TECHNIQUE(VsRigid_PsNormalsPrimaryOpacity, VsRigid, PsNormalsPrimaryOpacity );

TECHNIQUE(VsSkinned_PsNormalsPrimaryOpacity, VsSkinned, PsNormalsPrimaryOpacity );

TECHNIQUE(VsRigid_PsNormalsPrimaryOpacity, VsRigid, PsNormalsPrimaryOpacity );

TECHNIQUE(VsSkinned_PsNormalsPrimaryOpacity, VsSkinned, PsNormalsPrimaryOpacity );

TECHNIQUE(VsRigidBasis_PsTangentsPrimaryOpacity, VsRigidBasis, PsTangentsPrimaryOpacity );

TECHNIQUE(VsSkinnedBasis_PsTangentsPrimaryOpacity, VsSkinnedBasis, PsTangentsPrimaryOpacity );

TECHNIQUE(VsRigidBasis_PsTangentsPrimaryOpacity, VsRigidBasis, PsTangentsPrimaryOpacity );

TECHNIQUE(VsSkinnedBasis_PsTangentsPrimaryOpacity, VsSkinnedBasis, PsTangentsPrimaryOpacity );

TECHNIQUE(VsRigid_PsNormalsSecondaryOpacity, VsRigid, PsNormalsSecondaryOpacity );

TECHNIQUE(VsSkinned_PsNormalsSecondaryOpacity, VsSkinned, PsNormalsSecondaryOpacity );

TECHNIQUE(VsRigid_PsNormalsSecondaryOpacity, VsRigid, PsNormalsSecondaryOpacity );

TECHNIQUE(VsSkinned_PsNormalsSecondaryOpacity, VsSkinned, PsNormalsSecondaryOpacity );

TECHNIQUE(VsRigidBasis_PsTangentsSecondaryOpacity, VsRigidBasis, PsTangentsSecondaryOpacity );

TECHNIQUE(VsSkinnedBasis_PsTangentsSecondaryOpacity, VsSkinnedBasis, PsTangentsSecondaryOpacity );

TECHNIQUE(VsRigidBasis_PsTangentsSecondaryOpacity, VsRigidBasis, PsTangentsSecondaryOpacity );

TECHNIQUE(VsSkinnedBasis_PsTangentsSecondaryOpacity, VsSkinnedBasis, PsTangentsSecondaryOpacity );

TECHNIQUE(VsRigid_PsNormalsPrimarySecondaryOpacity, VsRigid, PsNormalsPrimarySecondaryOpacity );

TECHNIQUE(VsSkinned_PsNormalsPrimarySecondaryOpacity, VsSkinned, PsNormalsPrimarySecondaryOpacity );

TECHNIQUE(VsRigid_PsNormalsPrimarySecondaryOpacity, VsRigid, PsNormalsPrimarySecondaryOpacity );

TECHNIQUE(VsSkinned_PsNormalsPrimarySecondaryOpacity, VsSkinned, PsNormalsPrimarySecondaryOpacity );

TECHNIQUE(VsRigidBasis_PsTangentsPrimarySecondaryOpacity, VsRigidBasis, PsTangentsPrimarySecondaryOpacity );

TECHNIQUE(VsSkinnedBasis_PsTangentsPrimarySecondaryOpacity, VsSkinnedBasis, PsTangentsPrimarySecondaryOpacity );

TECHNIQUE(VsRigidBasis_PsTangentsPrimarySecondaryOpacity, VsRigidBasis, PsTangentsPrimarySecondaryOpacity );

TECHNIQUE(VsSkinnedBasis_PsTangentsPrimarySecondaryOpacity, VsSkinnedBasis, PsTangentsPrimarySecondaryOpacity );

TECHNIQUE(VsRigid_PsNormalsEmissiveOpacity, VsRigid, PsNormalsEmissiveOpacity );

TECHNIQUE(VsSkinned_PsNormalsEmissiveOpacity, VsSkinned, PsNormalsEmissiveOpacity );

TECHNIQUE(VsRigid_PsNormalsEmissiveOpacity, VsRigid, PsNormalsEmissiveOpacity );

TECHNIQUE(VsSkinned_PsNormalsEmissiveOpacity, VsSkinned, PsNormalsEmissiveOpacity );

TECHNIQUE(VsRigidBasis_PsTangentsEmissiveOpacity, VsRigidBasis, PsTangentsEmissiveOpacity );

TECHNIQUE(VsSkinnedBasis_PsTangentsEmissiveOpacity, VsSkinnedBasis, PsTangentsEmissiveOpacity );

TECHNIQUE(VsRigidBasis_PsTangentsEmissiveOpacity, VsRigidBasis, PsTangentsEmissiveOpacity );

TECHNIQUE(VsSkinnedBasis_PsTangentsEmissiveOpacity, VsSkinnedBasis, PsTangentsEmissiveOpacity );

TECHNIQUE(VsRigid_PsNormalsPrimaryEmissiveOpacity, VsRigid, PsNormalsPrimaryEmissiveOpacity );

TECHNIQUE(VsSkinned_PsNormalsPrimaryEmissiveOpacity, VsSkinned, PsNormalsPrimaryEmissiveOpacity );

TECHNIQUE(VsRigid_PsNormalsPrimaryEmissiveOpacity, VsRigid, PsNormalsPrimaryEmissiveOpacity );

TECHNIQUE(VsSkinned_PsNormalsPrimaryEmissiveOpacity, VsSkinned, PsNormalsPrimaryEmissiveOpacity );

TECHNIQUE(VsRigidBasis_PsTangentsPrimaryEmissiveOpacity, VsRigidBasis, PsTangentsPrimaryEmissiveOpacity );

TECHNIQUE(VsSkinnedBasis_PsTangentsPrimaryEmissiveOpacity, VsSkinnedBasis, PsTangentsPrimaryEmissiveOpacity );

TECHNIQUE(VsRigidBasis_PsTangentsPrimaryEmissiveOpacity, VsRigidBasis, PsTangentsPrimaryEmissiveOpacity );

TECHNIQUE(VsSkinnedBasis_PsTangentsPrimaryEmissiveOpacity, VsSkinnedBasis, PsTangentsPrimaryEmissiveOpacity );

TECHNIQUE(VsRigid_PsNormalsSecondaryEmissiveOpacity, VsRigid, PsNormalsSecondaryEmissiveOpacity );

TECHNIQUE(VsSkinned_PsNormalsSecondaryEmissiveOpacity, VsSkinned, PsNormalsSecondaryEmissiveOpacity );

TECHNIQUE(VsRigid_PsNormalsSecondaryEmissiveOpacity, VsRigid, PsNormalsSecondaryEmissiveOpacity );

TECHNIQUE(VsSkinned_PsNormalsSecondaryEmissiveOpacity, VsSkinned, PsNormalsSecondaryEmissiveOpacity );

TECHNIQUE(VsRigidBasis_PsTangentsSecondaryEmissiveOpacity, VsRigidBasis, PsTangentsSecondaryEmissiveOpacity );

TECHNIQUE(VsSkinnedBasis_PsTangentsSecondaryEmissiveOpacity, VsSkinnedBasis, PsTangentsSecondaryEmissiveOpacity );

TECHNIQUE(VsRigidBasis_PsTangentsSecondaryEmissiveOpacity, VsRigidBasis, PsTangentsSecondaryEmissiveOpacity );

TECHNIQUE(VsSkinnedBasis_PsTangentsSecondaryEmissiveOpacity, VsSkinnedBasis, PsTangentsSecondaryEmissiveOpacity );

TECHNIQUE(VsRigid_PsNormalsPrimarySecondaryEmissiveOpacity, VsRigid, PsNormalsPrimarySecondaryEmissiveOpacity );

TECHNIQUE(VsSkinned_PsNormalsPrimarySecondaryEmissiveOpacity, VsSkinned, PsNormalsPrimarySecondaryEmissiveOpacity );

TECHNIQUE(VsRigid_PsNormalsPrimarySecondaryEmissiveOpacity, VsRigid, PsNormalsPrimarySecondaryEmissiveOpacity );

TECHNIQUE(VsSkinned_PsNormalsPrimarySecondaryEmissiveOpacity, VsSkinned, PsNormalsPrimarySecondaryEmissiveOpacity );

TECHNIQUE(VsRigidBasis_PsTangentsPrimarySecondaryEmissiveOpacity, VsRigidBasis, PsTangentsPrimarySecondaryEmissiveOpacity );

TECHNIQUE(VsSkinnedBasis_PsTangentsPrimarySecondaryEmissiveOpacity, VsSkinnedBasis, PsTangentsPrimarySecondaryEmissiveOpacity );

TECHNIQUE(VsRigidBasis_PsTangentsPrimarySecondaryEmissiveOpacity, VsRigidBasis, PsTangentsPrimarySecondaryEmissiveOpacity );

TECHNIQUE(VsSkinnedBasis_PsTangentsPrimarySecondaryEmissiveOpacity, VsSkinnedBasis, PsTangentsPrimarySecondaryEmissiveOpacity );

