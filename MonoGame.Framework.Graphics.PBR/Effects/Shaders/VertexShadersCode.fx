//-----------------------------------------------------
//         Autogenerated code - DO NOT EDIT -
//         Edit VertexShadersCode.tt and save.
//-----------------------------------------------------


float4x4 View;
float4x4 Projection;





VsOutTexNorm VsInRigid_C1_VShader(VsInRigid_C1 input)
{
    VsOutTexNorm output;

    float4 pos = input.GetWorldPosition();
    output.PositionWS = pos.xyz;

    float4x4 xvp = mul(View, Projection);
    output.PositionPS = mul(pos, xvp);

        // output.TangentBasis = ?;
    output.TangentBasisX = float3(1,0,0);
    output.TangentBasisY = float3(0,1,0);
    output.TangentBasisZ = float3(0,0,1);
    
    output.Color = input.Color;    
    output.TextureCoordinate0 = float2(0.5,0.5);  
    output.TextureCoordinate1 = output.TextureCoordinate0;  

    return output;
}

VsOutTexNorm VsInSkinned_C1_VShader(VsInSkinned_C1 input)
{
    VsInRigid_C1 output = input.GetTransformedByBones();

    return VsInRigid_C1_VShader(output);
}


VsOutTexNorm VsInRigid_N_C1_VShader(VsInRigid_N_C1 input)
{
    VsOutTexNorm output;

    float4 pos = input.GetWorldPosition();
    output.PositionWS = pos.xyz;

    float4x4 xvp = mul(View, Projection);
    output.PositionPS = mul(pos, xvp);

     
    float3x3 TBN = input.GetTangentBasis();
    // output.TangentBasis = TBN;
    output.TangentBasisX = TBN[0];
    output.TangentBasisY = TBN[1];
    output.TangentBasisZ = TBN[2];    
    
    output.Color = input.Color;    
    output.TextureCoordinate0 = float2(0.5,0.5);  
    output.TextureCoordinate1 = output.TextureCoordinate0;  

    return output;
}

VsOutTexNorm VsInSkinned_N_C1_VShader(VsInSkinned_N_C1 input)
{
    VsInRigid_N_C1 output = input.GetTransformedByBones();

    return VsInRigid_N_C1_VShader(output);
}


VsOutTexNorm VsInRigid_NT_C1_VShader(VsInRigid_NT_C1 input)
{
    VsOutTexNorm output;

    float4 pos = input.GetWorldPosition();
    output.PositionWS = pos.xyz;

    float4x4 xvp = mul(View, Projection);
    output.PositionPS = mul(pos, xvp);

     
    float3x3 TBN = input.GetTangentBasis();
    // output.TangentBasis = TBN;
    output.TangentBasisX = TBN[0];
    output.TangentBasisY = TBN[1];
    output.TangentBasisZ = TBN[2];    
    
    output.Color = input.Color;    
    output.TextureCoordinate0 = float2(0.5,0.5);  
    output.TextureCoordinate1 = output.TextureCoordinate0;  

    return output;
}

VsOutTexNorm VsInSkinned_NT_C1_VShader(VsInSkinned_NT_C1 input)
{
    VsInRigid_NT_C1 output = input.GetTransformedByBones();

    return VsInRigid_NT_C1_VShader(output);
}


VsOutTexNorm VsInRigid_UV1_VShader(VsInRigid_UV1 input)
{
    VsOutTexNorm output;

    float4 pos = input.GetWorldPosition();
    output.PositionWS = pos.xyz;

    float4x4 xvp = mul(View, Projection);
    output.PositionPS = mul(pos, xvp);

        // output.TangentBasis = ?;
    output.TangentBasisX = float3(1,0,0);
    output.TangentBasisY = float3(0,1,0);
    output.TangentBasisZ = float3(0,0,1);
    
    output.Color = float4(1,1,1,1);    
    output.TextureCoordinate0 = input.TextureCoordinate0;  
    output.TextureCoordinate1 = output.TextureCoordinate0;  

    return output;
}

VsOutTexNorm VsInSkinned_UV1_VShader(VsInSkinned_UV1 input)
{
    VsInRigid_UV1 output = input.GetTransformedByBones();

    return VsInRigid_UV1_VShader(output);
}


VsOutTexNorm VsInRigid_N_UV1_VShader(VsInRigid_N_UV1 input)
{
    VsOutTexNorm output;

    float4 pos = input.GetWorldPosition();
    output.PositionWS = pos.xyz;

    float4x4 xvp = mul(View, Projection);
    output.PositionPS = mul(pos, xvp);

     
    float3x3 TBN = input.GetTangentBasis();
    // output.TangentBasis = TBN;
    output.TangentBasisX = TBN[0];
    output.TangentBasisY = TBN[1];
    output.TangentBasisZ = TBN[2];    
    
    output.Color = float4(1,1,1,1);    
    output.TextureCoordinate0 = input.TextureCoordinate0;  
    output.TextureCoordinate1 = output.TextureCoordinate0;  

    return output;
}

VsOutTexNorm VsInSkinned_N_UV1_VShader(VsInSkinned_N_UV1 input)
{
    VsInRigid_N_UV1 output = input.GetTransformedByBones();

    return VsInRigid_N_UV1_VShader(output);
}


VsOutTexNorm VsInRigid_NT_UV1_VShader(VsInRigid_NT_UV1 input)
{
    VsOutTexNorm output;

    float4 pos = input.GetWorldPosition();
    output.PositionWS = pos.xyz;

    float4x4 xvp = mul(View, Projection);
    output.PositionPS = mul(pos, xvp);

     
    float3x3 TBN = input.GetTangentBasis();
    // output.TangentBasis = TBN;
    output.TangentBasisX = TBN[0];
    output.TangentBasisY = TBN[1];
    output.TangentBasisZ = TBN[2];    
    
    output.Color = float4(1,1,1,1);    
    output.TextureCoordinate0 = input.TextureCoordinate0;  
    output.TextureCoordinate1 = output.TextureCoordinate0;  

    return output;
}

VsOutTexNorm VsInSkinned_NT_UV1_VShader(VsInSkinned_NT_UV1 input)
{
    VsInRigid_NT_UV1 output = input.GetTransformedByBones();

    return VsInRigid_NT_UV1_VShader(output);
}


VsOutTexNorm VsInRigid_C1_UV1_VShader(VsInRigid_C1_UV1 input)
{
    VsOutTexNorm output;

    float4 pos = input.GetWorldPosition();
    output.PositionWS = pos.xyz;

    float4x4 xvp = mul(View, Projection);
    output.PositionPS = mul(pos, xvp);

        // output.TangentBasis = ?;
    output.TangentBasisX = float3(1,0,0);
    output.TangentBasisY = float3(0,1,0);
    output.TangentBasisZ = float3(0,0,1);
    
    output.Color = input.Color;    
    output.TextureCoordinate0 = input.TextureCoordinate0;  
    output.TextureCoordinate1 = output.TextureCoordinate0;  

    return output;
}

VsOutTexNorm VsInSkinned_C1_UV1_VShader(VsInSkinned_C1_UV1 input)
{
    VsInRigid_C1_UV1 output = input.GetTransformedByBones();

    return VsInRigid_C1_UV1_VShader(output);
}


VsOutTexNorm VsInRigid_N_C1_UV1_VShader(VsInRigid_N_C1_UV1 input)
{
    VsOutTexNorm output;

    float4 pos = input.GetWorldPosition();
    output.PositionWS = pos.xyz;

    float4x4 xvp = mul(View, Projection);
    output.PositionPS = mul(pos, xvp);

     
    float3x3 TBN = input.GetTangentBasis();
    // output.TangentBasis = TBN;
    output.TangentBasisX = TBN[0];
    output.TangentBasisY = TBN[1];
    output.TangentBasisZ = TBN[2];    
    
    output.Color = input.Color;    
    output.TextureCoordinate0 = input.TextureCoordinate0;  
    output.TextureCoordinate1 = output.TextureCoordinate0;  

    return output;
}

VsOutTexNorm VsInSkinned_N_C1_UV1_VShader(VsInSkinned_N_C1_UV1 input)
{
    VsInRigid_N_C1_UV1 output = input.GetTransformedByBones();

    return VsInRigid_N_C1_UV1_VShader(output);
}


VsOutTexNorm VsInRigid_NT_C1_UV1_VShader(VsInRigid_NT_C1_UV1 input)
{
    VsOutTexNorm output;

    float4 pos = input.GetWorldPosition();
    output.PositionWS = pos.xyz;

    float4x4 xvp = mul(View, Projection);
    output.PositionPS = mul(pos, xvp);

     
    float3x3 TBN = input.GetTangentBasis();
    // output.TangentBasis = TBN;
    output.TangentBasisX = TBN[0];
    output.TangentBasisY = TBN[1];
    output.TangentBasisZ = TBN[2];    
    
    output.Color = input.Color;    
    output.TextureCoordinate0 = input.TextureCoordinate0;  
    output.TextureCoordinate1 = output.TextureCoordinate0;  

    return output;
}

VsOutTexNorm VsInSkinned_NT_C1_UV1_VShader(VsInSkinned_NT_C1_UV1 input)
{
    VsInRigid_NT_C1_UV1 output = input.GetTransformedByBones();

    return VsInRigid_NT_C1_UV1_VShader(output);
}


VsOutTexNorm VsInRigid_C1_UV2_VShader(VsInRigid_C1_UV2 input)
{
    VsOutTexNorm output;

    float4 pos = input.GetWorldPosition();
    output.PositionWS = pos.xyz;

    float4x4 xvp = mul(View, Projection);
    output.PositionPS = mul(pos, xvp);

        // output.TangentBasis = ?;
    output.TangentBasisX = float3(1,0,0);
    output.TangentBasisY = float3(0,1,0);
    output.TangentBasisZ = float3(0,0,1);
    
    output.Color = input.Color;    
    output.TextureCoordinate0 = input.TextureCoordinate0;  
    output.TextureCoordinate1 = input.TextureCoordinate1;  

    return output;
}

VsOutTexNorm VsInSkinned_C1_UV2_VShader(VsInSkinned_C1_UV2 input)
{
    VsInRigid_C1_UV2 output = input.GetTransformedByBones();

    return VsInRigid_C1_UV2_VShader(output);
}


VsOutTexNorm VsInRigid_N_C1_UV2_VShader(VsInRigid_N_C1_UV2 input)
{
    VsOutTexNorm output;

    float4 pos = input.GetWorldPosition();
    output.PositionWS = pos.xyz;

    float4x4 xvp = mul(View, Projection);
    output.PositionPS = mul(pos, xvp);

     
    float3x3 TBN = input.GetTangentBasis();
    // output.TangentBasis = TBN;
    output.TangentBasisX = TBN[0];
    output.TangentBasisY = TBN[1];
    output.TangentBasisZ = TBN[2];    
    
    output.Color = input.Color;    
    output.TextureCoordinate0 = input.TextureCoordinate0;  
    output.TextureCoordinate1 = input.TextureCoordinate1;  

    return output;
}

VsOutTexNorm VsInSkinned_N_C1_UV2_VShader(VsInSkinned_N_C1_UV2 input)
{
    VsInRigid_N_C1_UV2 output = input.GetTransformedByBones();

    return VsInRigid_N_C1_UV2_VShader(output);
}


VsOutTexNorm VsInRigid_NT_C1_UV2_VShader(VsInRigid_NT_C1_UV2 input)
{
    VsOutTexNorm output;

    float4 pos = input.GetWorldPosition();
    output.PositionWS = pos.xyz;

    float4x4 xvp = mul(View, Projection);
    output.PositionPS = mul(pos, xvp);

     
    float3x3 TBN = input.GetTangentBasis();
    // output.TangentBasis = TBN;
    output.TangentBasisX = TBN[0];
    output.TangentBasisY = TBN[1];
    output.TangentBasisZ = TBN[2];    
    
    output.Color = input.Color;    
    output.TextureCoordinate0 = input.TextureCoordinate0;  
    output.TextureCoordinate1 = input.TextureCoordinate1;  

    return output;
}

VsOutTexNorm VsInSkinned_NT_C1_UV2_VShader(VsInSkinned_NT_C1_UV2 input)
{
    VsInRigid_NT_C1_UV2 output = input.GetTransformedByBones();

    return VsInRigid_NT_C1_UV2_VShader(output);
}





