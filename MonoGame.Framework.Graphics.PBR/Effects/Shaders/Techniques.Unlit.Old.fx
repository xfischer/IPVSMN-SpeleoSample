//-----------------------------------------------------
//         Autogenerated code - DO NOT EDIT -
//           Edit Permutations.tt and save.
//-----------------------------------------------------

#include "Unlit.fx"
#include "VertexShaders.fx"

float4 Ps(VsOutTexNorm input) : COLOR0
{
	return PsShader(input	
	, false	
	, false
	, false
	);
}

float4 PsPrimary(VsOutTexNorm input) : COLOR0
{
	return PsShader(input	
	, true	
	, false
	, false
	);
}

float4 PsEmissive(VsOutTexNorm input) : COLOR0
{
	return PsShader(input	
	, false	
	, true
	, false
	);
}

float4 PsPrimaryEmissive(VsOutTexNorm input) : COLOR0
{
	return PsShader(input	
	, true	
	, true
	, false
	);
}

float4 PsOpacity(VsOutTexNorm input) : COLOR0
{
	return PsShader(input	
	, false	
	, false
	, true
	);
}

float4 PsPrimaryOpacity(VsOutTexNorm input) : COLOR0
{
	return PsShader(input	
	, true	
	, false
	, true
	);
}

float4 PsEmissiveOpacity(VsOutTexNorm input) : COLOR0
{
	return PsShader(input	
	, false	
	, true
	, true
	);
}

float4 PsPrimaryEmissiveOpacity(VsOutTexNorm input) : COLOR0
{
	return PsShader(input	
	, true	
	, true
	, true
	);
}

TECHNIQUE(VsRigid_Ps, VsRigid, Ps );

TECHNIQUE(VsSkinned_Ps, VsSkinned, Ps );

TECHNIQUE(VsRigid_Ps, VsRigid, Ps );

TECHNIQUE(VsSkinned_Ps, VsSkinned, Ps );

TECHNIQUE(VsRigid_PsPrimary, VsRigid, PsPrimary );

TECHNIQUE(VsSkinned_PsPrimary, VsSkinned, PsPrimary );

TECHNIQUE(VsRigid_PsPrimary, VsRigid, PsPrimary );

TECHNIQUE(VsSkinned_PsPrimary, VsSkinned, PsPrimary );

TECHNIQUE(VsRigid_PsEmissive, VsRigid, PsEmissive );

TECHNIQUE(VsSkinned_PsEmissive, VsSkinned, PsEmissive );

TECHNIQUE(VsRigid_PsEmissive, VsRigid, PsEmissive );

TECHNIQUE(VsSkinned_PsEmissive, VsSkinned, PsEmissive );

TECHNIQUE(VsRigid_PsPrimaryEmissive, VsRigid, PsPrimaryEmissive );

TECHNIQUE(VsSkinned_PsPrimaryEmissive, VsSkinned, PsPrimaryEmissive );

TECHNIQUE(VsRigid_PsPrimaryEmissive, VsRigid, PsPrimaryEmissive );

TECHNIQUE(VsSkinned_PsPrimaryEmissive, VsSkinned, PsPrimaryEmissive );

TECHNIQUE(VsRigid_PsOpacity, VsRigid, PsOpacity );

TECHNIQUE(VsSkinned_PsOpacity, VsSkinned, PsOpacity );

TECHNIQUE(VsRigid_PsOpacity, VsRigid, PsOpacity );

TECHNIQUE(VsSkinned_PsOpacity, VsSkinned, PsOpacity );

TECHNIQUE(VsRigid_PsPrimaryOpacity, VsRigid, PsPrimaryOpacity );

TECHNIQUE(VsSkinned_PsPrimaryOpacity, VsSkinned, PsPrimaryOpacity );

TECHNIQUE(VsRigid_PsPrimaryOpacity, VsRigid, PsPrimaryOpacity );

TECHNIQUE(VsSkinned_PsPrimaryOpacity, VsSkinned, PsPrimaryOpacity );

TECHNIQUE(VsRigid_PsEmissiveOpacity, VsRigid, PsEmissiveOpacity );

TECHNIQUE(VsSkinned_PsEmissiveOpacity, VsSkinned, PsEmissiveOpacity );

TECHNIQUE(VsRigid_PsEmissiveOpacity, VsRigid, PsEmissiveOpacity );

TECHNIQUE(VsSkinned_PsEmissiveOpacity, VsSkinned, PsEmissiveOpacity );

TECHNIQUE(VsRigid_PsPrimaryEmissiveOpacity, VsRigid, PsPrimaryEmissiveOpacity );

TECHNIQUE(VsSkinned_PsPrimaryEmissiveOpacity, VsSkinned, PsPrimaryEmissiveOpacity );

TECHNIQUE(VsRigid_PsPrimaryEmissiveOpacity, VsRigid, PsPrimaryEmissiveOpacity );

TECHNIQUE(VsSkinned_PsPrimaryEmissiveOpacity, VsSkinned, PsPrimaryEmissiveOpacity );

